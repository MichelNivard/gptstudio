[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported repo owner, James Wade. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to gptstudio","title":"Contributing to gptstudio","text":"outlines propose change gptstudio. based tidyverse team’s contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to gptstudio","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to gptstudio","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. Maybe work together! ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). aren’t sure create reprex (can tricky gptstudio interactive tools), please just describe issue best can.","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to gptstudio","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"MichelNivard/gptstudio\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to gptstudio","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to gptstudio","text":"Please note gptstudio project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 gptstudio authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with gptstudio","title":"Getting help with gptstudio","text":"Thanks using gptstudio! eager excited help. Thank trying package! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with gptstudio","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with gptstudio","text":"Armed reprex, next step figure ask. ’s bug: ’re right place, file issue. ’s question: sure ’s gptstudio another R question. Please file issue. package grows popularity, may try Posit Community StackOverflow. people answer questions. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"/articles/anthropic.html","id":"creating-an-anthropic-account","dir":"Articles","previous_headings":"","what":"Creating an Anthropic Account","title":"Anthropic API Service","text":"Go Anthropic website sign . Verify account instructed.","code":""},{"path":"/articles/anthropic.html","id":"creating-an-anthropic-api-key","dir":"Articles","previous_headings":"","what":"Creating an Anthropic API Key","title":"Anthropic API Service","text":"Log Anthropic account navigate API section. Create API key following guidelines. Check Anthropic’s API documentation details.","code":""},{"path":"/articles/anthropic.html","id":"setting-the-anthropic-api-key-in--renviron","dir":"Articles","previous_headings":"","what":"Setting the Anthropic API Key in .Renviron","title":"Anthropic API Service","text":"modify .Renviron file: persistent setting, add following line .Renviron, replacing \"<APIKEY>\" actual Anthropic API key: Save file restart R session changes take effect. Caution: Ensure .Renviron exposed using version control systems.","code":"require(usethis) edit_r_environ() ANTHROPIC_API_KEY=\"<APIKEY>\""},{"path":"/articles/azure.html","id":"azure-openai-service","dir":"Articles","previous_headings":"","what":"Azure OpenAI Service","title":"Azure OpenAI API Service","text":"configure gptstudio work using Azure OpenAI service, need provide configuration details .Renviron file. Specifically, gptstudio looks five environment variables: AZURE_OPENAI_TASK AZURE_OPENAI_ENDPOINT AZURE_OPENAI_DEPLOYMENT_NAME AZURE_OPENAI_API_KEY AZURE_OPENAI_API_VERSION AZURE_OPENAI_USE_TOKEN ’s can add details .Renviron file: Locate .Renviron file usethis::edit_r_environ(). Add environment variable details: Add new line variable need set following format: VARIABLE_NAME=“YOUR_VALUE”. Replace VARIABLE_NAME name environment variable YOUR_VALUE actual value want set. example, set API key line like : need environment variables expected function. .Renviron file look something like : Save Close .Renviron: adding environment variables, save .Renviron file close . need restart R session make sure new environment variables loaded properly. Remember replace your_task_code, your_endpoint_url, your_deployment_name, your_api_key, your_api_version actual Azure OpenAI details. can retrieve details Azure OpenAI service account. information Azure OpenAI configuration, refer Microsoft quickstart guide.","code":"AZURE_OPENAI_API_KEY=\"your_actual_key_goes_here\" AZURE_OPENAI_TASK=\"your_task_code\" AZURE_OPENAI_ENDPOINT=\"your_endpoint_url\" AZURE_OPENAI_DEPLOYMENT_NAME=\"your_deployment_name\" AZURE_OPENAI_API_KEY=\"your_api_key\" AZURE_OPENAI_API_VERSION=\"your_api_version\" AZURE_OPENAI_USE_TOKEN=FALSE"},{"path":"/articles/cohere.html","id":"creating-a-cohere-account","dir":"Articles","previous_headings":"","what":"Creating a Cohere Account","title":"Cohere","text":"Go Cohere website sign . Verify account instructed.","code":""},{"path":"/articles/cohere.html","id":"creating-a-cohere-api-key","dir":"Articles","previous_headings":"","what":"Creating a Cohere API Key","title":"Cohere","text":"Log Cohere account navigate API documentation. Create API key following guidelines. Check Cohere’s API documentation details.","code":""},{"path":"/articles/cohere.html","id":"setting-the-cohere-api-key-in--renviron","dir":"Articles","previous_headings":"","what":"Setting the Cohere API Key in .Renviron","title":"Cohere","text":"modify .Renviron file: persistent setting, add following line .Renviron, replacing \"<APIKEY>\" actual Cohere API key: Save file restart R session changes take effect. Caution: Ensure .Renviron exposed using version control systems.","code":"`#| eval: false require(usethis) edit_r_environ()` COHERE_API_KEY=\"<APIKEY>\""},{"path":"/articles/google.html","id":"creating-an-account-in-googles-ai-studio","dir":"Articles","previous_headings":"","what":"Creating an Account in Google’s AI Studio","title":"Google's AI Studio API Service","text":"Visit Google’s AI Studio website sign . Complete verification process.","code":""},{"path":"/articles/google.html","id":"accessing-google-ai-studio-gemini-and-palm-api","dir":"Articles","previous_headings":"","what":"Accessing Google AI Studio (Gemini and PALM) API","title":"Google's AI Studio API Service","text":"Google Cloud Console, enable Google AI Studio API. Create API key per instructions Google’s API documentation.","code":""},{"path":"/articles/google.html","id":"setting-the-google-ai-studio-api-key-in--renviron","dir":"Articles","previous_headings":"","what":"Setting the Google AI Studio API Key in .Renviron","title":"Google's AI Studio API Service","text":"modify .Renviron file: persistent setting, add following line .Renviron, replacing \"<APIKEY>\" actual Google AI Studio API key: Save file restart R session changes take effect. Caution: careful expose .Renviron public repositories version control systems protect API key.","code":"require(usethis) edit_r_environ() GOOGLE_API_KEY=\"<APIKEY>\""},{"path":"/articles/huggingface.html","id":"creating-a-huggingface-account","dir":"Articles","previous_headings":"","what":"Creating a HuggingFace Account","title":"HuggingFace API Service","text":"Visit HuggingFace’s website sign account. Complete account verification process.","code":""},{"path":"/articles/huggingface.html","id":"creating-a-huggingface-api-key","dir":"Articles","previous_headings":"","what":"Creating a HuggingFace API Key","title":"HuggingFace API Service","text":"logging , go account settings. Find section API keys create new one. Detailed guidance available HuggingFace’s API documentation.","code":""},{"path":"/articles/huggingface.html","id":"setting-the-huggingface-api-key-in--renviron","dir":"Articles","previous_headings":"","what":"Setting the HuggingFace API Key in .Renviron","title":"HuggingFace API Service","text":"modify .Renviron file: persistent setting, add following line .Renviron, replacing \"<APIKEY>\" actual HuggingFace API key: Save file restart R session changes take effect. Caution: Remember include .Renviron .gitignore file prevent exposing API key, especially using version control systems like GitHub GitLab.","code":"require(usethis) edit_r_environ() HF_API_KEY=\"<APIKEY>\""},{"path":"/articles/no-build/chat-in-source.html","id":"quick-start","dir":"Articles > No-build","previous_headings":"","what":"Quick Start","title":"Chat in Source","text":"Chat Source addin can accessed RStudio Addins menu. addin allows send selected code OpenAI API insert response .Rmd file. Usage: Select R code .Rmd file want send OpenAI. Go RStudio Addins menu choose “Chat Source”. response OpenAI inserted location selected code. Optional: set keyboard shortcut “Chat Source” addin, follow steps: Go Tools > Modify Keyboard Shortcuts RStudio. Search “Chat Source” list addins. Assign custom keyboard shortcut addin quick access.","code":""},{"path":"/articles/no-build/chat-in-source.html","id":"what-is-chat-in-source","dir":"Articles > No-build","previous_headings":"","what":"What is Chat in Source?","title":"Chat in Source","text":"Chat Source addin modify files directly. can access RStudio Addins menu. use addin, first need select code want modify. , can call addin. addin send selected code OpenAI API insert response file. convenience, may want map addin keyboard shortcut. can going Tools > Modify Keyboard Shortcuts searching “Chat Source”. can assign custom keyboard shortcut addin.","code":""},{"path":"/articles/no-build/chat-in-source.html","id":"changing-the-service-model","dir":"Articles > No-build","previous_headings":"","what":"Changing the Service & Model","title":"Chat in Source","text":"Chat Source addin allows customize model API service used app. Like Chat addin, default service OpenAI. change , need change settings Chat app. change model Chat Chat Source addins.","code":""},{"path":"/articles/no-build/chat-in-source.html","id":"examples-and-use-cases","dir":"Articles > No-build","previous_headings":"","what":"Examples and Use Cases","title":"Chat in Source","text":"“Chat Source” addin can augment R workflow many creative ways. practical examples: Documentation Assistance Generate insightful comments explaining complex code Summarize plots statistical output Clarify ambiguous variable names logic flow Code Improvement Suggest optimizations slow functions Identify potential bugs edge cases Propose simplifications refactoring ideas Code Generation Provide code snippets common data tasks like joins, visualizations etc. Translate pseudo-code outlines runnable R scripts Convert code Python/SQL equivalent R code Education Learning Explain unfamiliar R concepts packages Provide examples demonstrating R techniques Generate mini-tutorials tailored knowledge gaps Collaboration Review code sharing, suggest improvements Clarify code logic smoother peer review Standardize style align project conventions","code":""},{"path":"/articles/no-build/chat.html","id":"what-is-chat","dir":"Articles > No-build","previous_headings":"","what":"What is Chat?","title":"Chat","text":"Chat app gptstudio interactive AI assistant within RStudio. Unlike Chat Source, operates directly source code, Chat provides separate interface can engage two-way conversation AI models. setup especially useful : Exploring ideas seeking advice R coding problems. Getting quick explanations clarifications programming concepts. Experimenting AI-generated code text incorporating projects. Using learning tool enhance understanding R data science topics. Remember, Chat powerful tool, ’s always important critically evaluate AI’s responses ensure align project’s requirements standards.","code":""},{"path":"/articles/no-build/chat.html","id":"usage","dir":"Articles > No-build","previous_headings":"","what":"Usage","title":"Chat","text":"examples use package .","code":""},{"path":"/articles/no-build/chat.html","id":"chat-in-rstudio","dir":"Articles > No-build","previous_headings":"Usage","what":"Chat in RStudio","title":"Chat","text":"Addins > gptstudio > Chat Type question. Click “Send” button press “Enter” Ask questions Copy try code  Chat addin supports internationalization. can set “GPTSTUDIO_LANGUAGE” environmental variable language preference (.e. GPTSTUDIO_LANGUAGE=\"es\" spanish). See full list supported languages translation file (\"inst/translations/translation.json\").","code":""},{"path":"/articles/no-build/chat.html","id":"using-other-models","dir":"Articles > No-build","previous_headings":"Usage > Chat in RStudio","what":"Using Other Models","title":"Chat","text":"’re excited announce service now includes models HuggingFace’s inference API, Anthropic’s claude models, Google’s AI Studio, Azure OpenAI, local models Ollama broadening range AI solutions can use. can set model using setting (gear) button Chat addin app.","code":""},{"path":"/articles/no-build/chat.html","id":"persistent-user-settings-custom-prompt","dir":"Articles > No-build","previous_headings":"Usage > Chat in RStudio","what":"Persistent User Settings & Custom Prompt","title":"Chat","text":"can now save app settings across sessions. saved user config file. easiest way change settings “Save Default” button add-app. also allows specify custom prompt pass model instructions.","code":""},{"path":"/articles/no-build/chat.html","id":"provide-your-own-instructions-in-r-r-markdown-or-quarto-files","dir":"Articles > No-build","previous_headings":"Usage","what":"Provide your own instructions in R, R Markdown, or Quarto files","title":"Chat","text":"Addins > GPTSTUDIO > Chat Source: Apply edit desire can dream selection code text.","code":""},{"path":"/articles/no-build/chat.html","id":"spelling-ang-grammar-check","dir":"Articles > No-build","previous_headings":"Usage","what":"Spelling ang grammar check","title":"Chat","text":"Addins > GPTSTUDIO > Spelling Grammar: Takes selected text sends OpenAI’s best model instructs return spelling grammar checked version.","code":""},{"path":"/articles/no-build/chat.html","id":"comment-your-code","dir":"Articles > No-build","previous_headings":"Usage","what":"Comment your code:","title":"Chat","text":"Addins > GPTSTUDIO > Comment code: Takes selected text sends OpenAI prompt code specific model work , asks version comment added explaining code line line.","code":""},{"path":"/articles/no-build/ollama.html","id":"an-example-with-ollama","dir":"Articles > No-build","previous_headings":"","what":"An Example with Ollama","title":"Local Models with Ollama","text":"short video showing get started ollama. assumes already installed docker. See docker installation guide information.","code":""},{"path":"/articles/openai.html","id":"creating-an-openai-account","dir":"Articles","previous_headings":"","what":"Creating an OpenAI Account","title":"OpenAI API Service","text":"Visit OpenAI’s website sign account. Follow instructions verify account.","code":""},{"path":"/articles/openai.html","id":"creating-an-openai-api-key","dir":"Articles","previous_headings":"","what":"Creating an OpenAI API Key","title":"OpenAI API Service","text":"logged , navigate API section account settings. Follow instructions create new API key. detailed steps can found OpenAI’s API documentation.","code":""},{"path":"/articles/openai.html","id":"setting-the-openai-api-key-in--renviron","dir":"Articles","previous_headings":"","what":"Setting the OpenAI API Key in .Renviron","title":"OpenAI API Service","text":"modify .Renviron file: persistent setting, add following line .Renviron, replacing \"<APIKEY>\" actual API key: Save file restart R session changes take effect. Caution: Ensure .Renviron included .gitignore file avoid exposing API key version control systems like GitHub GitLab. Important Note: OpenAI API requires valid payment details OpenAI account function. restriction imposed OpenAI unrelated package.","code":"require(usethis) edit_r_environ() OPENAI_API_KEY=\"<APIKEY>\""},{"path":"/articles/perplexity.html","id":"creating-an-perplexity-account","dir":"Articles","previous_headings":"","what":"Creating an Perplexity Account","title":"Perplexity","text":"Go Perplexity website sign . Verify account instructed.","code":""},{"path":"/articles/perplexity.html","id":"creating-an-perplexity-api-key","dir":"Articles","previous_headings":"","what":"Creating an Perplexity API Key","title":"Perplexity","text":"Log Perplexity account navigate API documentation. Create API key following guidelines. Check Perplexity’s API documentation details.","code":""},{"path":"/articles/perplexity.html","id":"setting-the-perplexity-api-key-in--renviron","dir":"Articles","previous_headings":"","what":"Setting the Perplexity API Key in .Renviron","title":"Perplexity","text":"modify .Renviron file: persistent setting, add following line .Renviron, replacing \"<APIKEY>\" actual Perplexity API key: Save file restart R session changes take effect. Caution: Ensure .Renviron exposed using version control systems.","code":"require(usethis) edit_r_environ() PERPLEXITY_API_KEY=\"<APIKEY>\""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michel Nivard. Author, copyright holder. James Wade. Author, maintainer, copyright holder. Samuel Calderon. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nivard M, Wade J, Calderon S (2025). gptstudio: Use Large Language Models Directly Development Environment. R package version 0.4.0.9009, https://michelnivard.github.io/gptstudio/, https://github.com/MichelNivard/gptstudio.","code":"@Manual{,   title = {gptstudio: Use Large Language Models Directly in your Development Environment},   author = {Michel Nivard and James Wade and Samuel Calderon},   year = {2025},   note = {R package version 0.4.0.9009,     https://michelnivard.github.io/gptstudio/},   url = {https://github.com/MichelNivard/gptstudio}, }"},{"path":"/index.html","id":"gptstudio-","dir":"","previous_headings":"","what":"Use Large Language Models Directly in your Development Environment","title":"Use Large Language Models Directly in your Development Environment","text":"goal gptstudio R programmers easily incorporate use large language models (LLMs) project workflows. models appear step change use text knowledge work, carefully consider ethical implications using models. addins, tailored R developers, also see sister package: gpttools","code":""},{"path":"/index.html","id":"getting-started-installation--ai-service-setup","dir":"","previous_headings":"","what":"Getting Started: Installation & AI Service Setup","title":"Use Large Language Models Directly in your Development Environment","text":"get bug fix use feature development version, can install development version package GitHub.","code":"install.packages(\"gptstudio\") # install.packages(\"pak\") pak::pak(\"MichelNivard/gptstudio\")"},{"path":[]},{"path":"/index.html","id":"default-ai-service-openai","dir":"","previous_headings":"Getting Started: Installation & AI Service Setup","what":"Default AI Service: OpenAI","title":"Use Large Language Models Directly in your Development Environment","text":"get started, must first set API service. package configured work several AI service providers, allowing flexibility choice based specific needs. default configuration set use OpenAI’s services. use need: Make OpenAI account. Sign . Create OpenAI API key use package. Set API key Rstudio. See section configuring API key.","code":""},{"path":"/index.html","id":"configuring-openai-api-key","dir":"","previous_headings":"Getting Started: Installation & AI Service Setup > Default AI Service: OpenAI","what":"Configuring OpenAI API Key","title":"Use Large Language Models Directly in your Development Environment","text":"interact OpenAI API, ’s required valid OPENAI_API_KEY environment variable. steps configure . can establish environment variable globally including project’s .Renviron file. approach ensures environment variable persists across sessions Shiny app runs background. set commands open .Renviron file modification: persistent setting loads every time launch project, add following line .Renviron, replacing \"<APIKEY>\" actual API key: Caution: ’re using version control systems like GitHub GitLab, remember include .Renviron .gitignore file prevent exposing API key! Important Note: OpenAI API function without valid payment details entered OpenAI account. restriction imposed OpenAI unrelated package.","code":"require(usethis) edit_r_environ() OPENAI_API_KEY=\"<APIKEY>\""},{"path":"/index.html","id":"alternative-ai-service-providers","dir":"","previous_headings":"Getting Started: Installation & AI Service Setup","what":"Alternative AI Service Providers","title":"Use Large Language Models Directly in your Development Environment","text":"OpenAI default currently considered one robust options, gptstudio also compatible AI service providers. include Anthropic, HuggingFace, Google AI Studio, Azure OpenAI, Perplexity. can select providers based preference specific requirements. can also run local models Ollama. requires setup benefit sharing data third party. use alternative provider, need obtain relevant API key access credentials chosen provider configure similarly.","code":""},{"path":"/index.html","id":"privacy-notice-for-gptstudio","dir":"","previous_headings":"","what":"Privacy Notice for gptstudio","title":"Use Large Language Models Directly in your Development Environment","text":"privacy notice applicable R package uses popular language models like gpt-4 turbo claude-3.5. using package, agree adhere privacy terms conditions set API service.","code":""},{"path":"/index.html","id":"data-sharing-with-ai-services","dir":"","previous_headings":"Privacy Notice for gptstudio","what":"Data Sharing with AI Services","title":"Use Large Language Models Directly in your Development Environment","text":"using R package, text code highlight/select cursor, prompt enter within built-applications, sent selected AI service provider (e.g., OpenAI, Anthropic, HuggingFace, Google AI Studio, Azure OpenAI) part API request. data sharing governed privacy notice, rules, exceptions agreed respective service provider creating account.","code":""},{"path":"/index.html","id":"security-and-data-usage-by-ai-service-providers","dir":"","previous_headings":"Privacy Notice for gptstudio","what":"Security and Data Usage by AI Service Providers","title":"Use Large Language Models Directly in your Development Environment","text":"guarantee security data send via API AI service provider, can provide details service processes uses data. However, providers often state use prompts results enhance AI models, outlined terms use. sure review terms use respective AI service provider directly.","code":""},{"path":"/index.html","id":"limiting-data-sharing","dir":"","previous_headings":"Privacy Notice for gptstudio","what":"Limiting Data Sharing","title":"Use Large Language Models Directly in your Development Environment","text":"R package designed share text code specifically highlight/select include prompt built-applications. elements R environment shared unless turn features . responsibility ensure accidentally share sensitive data AI service provider. IMPORTANT: maintain privacy data, highlight, include prompt, otherwise upload sensitive data, code, text remain confidential.","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Use Large Language Models Directly in your Development Environment","text":"Please note gptstudio project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/OpenaiStreamParser.html","id":null,"dir":"Reference","previous_headings":"","what":"Stream handler for chat completions — OpenaiStreamParser","title":"Stream handler for chat completions — OpenaiStreamParser","text":"Stream handler chat completions Stream handler chat completions","code":""},{"path":"/reference/OpenaiStreamParser.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stream handler for chat completions — OpenaiStreamParser","text":"R6 class allows handle chat completions chunk chunk. also adds methods retrieve relevant data. class make request. httr2::req_perform_stream blocks R console stream finishes, class can take shiny session object handle communication JS without recurring shiny::observe inside module server.","code":""},{"path":"/reference/OpenaiStreamParser.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Stream handler for chat completions — OpenaiStreamParser","text":"SSEparser::SSEparser -> OpenaiStreamParser","code":""},{"path":"/reference/OpenaiStreamParser.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Stream handler for chat completions — OpenaiStreamParser","text":"shinySession Holds session provided initialization user_prompt user_prompt provided initialization, formatted markdown. value content stream. updates constantly stream ends.","code":""},{"path":"/reference/OpenaiStreamParser.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Stream handler for chat completions — OpenaiStreamParser","text":"SSEparser::SSEparser$parse_sse()","code":""},{"path":"/reference/OpenaiStreamParser.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Stream handler for chat completions — OpenaiStreamParser","text":"OpenaiStreamParser$new() OpenaiStreamParser$append_parsed_sse() OpenaiStreamParser$clone()","code":""},{"path":"/reference/OpenaiStreamParser.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Stream handler for chat completions — OpenaiStreamParser","text":"Start StreamHandler. Recommended assigned stream_handler name.","code":""},{"path":"/reference/OpenaiStreamParser.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream handler for chat completions — OpenaiStreamParser","text":"","code":"OpenaiStreamParser$new(session = NULL, user_prompt = NULL)"},{"path":"/reference/OpenaiStreamParser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream handler for chat completions — OpenaiStreamParser","text":"session shiny session send message (optional). user_prompt prompt chat completion. displayed HTML tag containing prompt. (Optional).","code":""},{"path":"/reference/OpenaiStreamParser.html","id":"method-append-parsed-sse-","dir":"Reference","previous_headings":"","what":"Method append_parsed_sse()","title":"Stream handler for chat completions — OpenaiStreamParser","text":"Overwrites SSEparser$append_parsed_sse() able send custom message shiny session, escaping shiny's reactivity.","code":""},{"path":"/reference/OpenaiStreamParser.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream handler for chat completions — OpenaiStreamParser","text":"","code":"OpenaiStreamParser$append_parsed_sse(parsed_event)"},{"path":"/reference/OpenaiStreamParser.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream handler for chat completions — OpenaiStreamParser","text":"parsed_event already parsed server-sent event append events field.","code":""},{"path":"/reference/OpenaiStreamParser.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Stream handler for chat completions — OpenaiStreamParser","text":"objects class cloneable method.","code":""},{"path":"/reference/OpenaiStreamParser.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream handler for chat completions — OpenaiStreamParser","text":"","code":"OpenaiStreamParser$clone(deep = FALSE)"},{"path":"/reference/OpenaiStreamParser.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream handler for chat completions — OpenaiStreamParser","text":"deep Whether make deep clone.","code":""},{"path":"/reference/chat.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat Interface for gptstudio — chat","title":"Chat Interface for gptstudio — chat","text":"function provides high-level interface communicating various services models supported gptstudio. orchestrates creation, configuration, execution request based user inputs options set gptstudio. function supports range tasks text generation code synthesis can customized according skill level coding style preferences.","code":""},{"path":"/reference/chat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat Interface for gptstudio — chat","text":"","code":"chat(   prompt,   service = getOption(\"gptstudio.service\"),   history = list(list(role = \"system\", content = \"You are an R chat assistant\")),   stream = FALSE,   model = getOption(\"gptstudio.model\"),   skill = getOption(\"gptstudio.skill\"),   style = getOption(\"gptstudio.code_style\", \"no preference\"),   task = getOption(\"gptstudio.task\", \"coding\"),   custom_prompt = NULL,   process_response = FALSE,   session = NULL,   ... )"},{"path":"/reference/chat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat Interface for gptstudio — chat","text":"prompt string containing initial prompt question sent model. required parameter. service AI service used request. explicitly provided, defaults value set getOption(\"gptstudio.service\"). option set, make sure provide parameter avoid errors. history optional parameter can used include previous interactions context current session. Defaults system message indicating \"R chat assistant\". stream logical value indicating whether interaction treated stream continuous interactions. explicitly provided, defaults value set getOption(\"gptstudio.stream\"). model specific model use request. explicitly provided, defaults value set getOption(\"gptstudio.model\"). skill character string indicating skill capability level user. parameter allows customizing behavior model user. explicitly provided, defaults value set getOption(\"gptstudio.skill\"). style coding style preferred user code generation tasks. parameter particularly useful task involves generating code snippets scripts. explicitly provided, defaults value set getOption(\"gptstudio.code_style\"). task specific type task performed, ranging text generation code synthesis, depending capabilities model. explicitly provided, defaults value set getOption(\"gptstudio.task\"). custom_prompt optional parameter provides way extend customize initial prompt additional instructions context. process_response logical indicating whether process model's response. TRUE, response passed gptstudio_response_process() processing. Defaults FALSE. Refer gptstudio_response_process() details. session optional parameter shiny session object. ... Reserved future use.","code":""},{"path":"/reference/chat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chat Interface for gptstudio — chat","text":"Depending task processing, function returns response model, text, code, structured output defined task model capabilities. precise format content output depend specified options capabilities selected model.","code":""},{"path":"/reference/chat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chat Interface for gptstudio — chat","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with a text prompt: result <- chat(\"What is the weather like today?\")  # Advanced usage with custom settings, assuming appropriate global options are set: result <- chat(   prompt = \"Write a simple function in R\",   skill = \"advanced\",   style = \"tidyverse\",   task = \"coding\" )  # Usage with explicit service and model specification: result <- chat(   prompt = \"Explain the concept of tidy data in R\",   service = \"openai\",   model = \"gpt-4-turbo-preview\",   skill = \"intermediate\",   task = \"general\" ) } # }"},{"path":"/reference/chat_create_system_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create system prompt — chat_create_system_prompt","title":"Create system prompt — chat_create_system_prompt","text":"function creates customizable system prompt based user-defined parameters coding style, skill level, task. supports customization specific use cases custom prompt option.","code":""},{"path":"/reference/chat_create_system_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create system prompt — chat_create_system_prompt","text":"","code":"chat_create_system_prompt(   style = getOption(\"gptstudio.code_style\"),   skill = getOption(\"gptstudio.skill\"),   task = getOption(\"gptstudio.task\"),   custom_prompt = getOption(\"gptstudio.custom_prompt\"),   in_source = FALSE )"},{"path":"/reference/chat_create_system_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create system prompt — chat_create_system_prompt","text":"style character string indicating preferred coding style. Valid values \"tidyverse\", \"base\", \"preference\". Defaults getOption(gptstudio.code_style). skill self-described skill level programmer. Valid values \"beginner\", \"intermediate\", \"advanced\", \"genius\". Defaults getOption(gptstudio.skill). task specific task performed: \"coding\", \"general\", \"advanced developer\", \"custom\". influences generated system prompt. Defaults \"coding\". custom_prompt optional custom prompt string utilized task set \"custom\". Default NULL. in_source logical indicating whether instructions intended use source script. parameter required must explicitly set TRUE FALSE. Default FALSE.","code":""},{"path":"/reference/chat_create_system_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create system prompt — chat_create_system_prompt","text":"Returns character string forms system prompt tailored specified parameters. string provides guidance instructions based user's coding style, skill level, task.","code":""},{"path":"/reference/chat_create_system_prompt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create system prompt — chat_create_system_prompt","text":"","code":"if (FALSE) { # \\dontrun{ chat_create_system_prompt(in_source = TRUE) chat_create_system_prompt(   style = \"tidyverse\",   skill = \"advanced\",   task = \"coding\",   in_source = FALSE ) } # }"},{"path":"/reference/chat_history_append.html","id":null,"dir":"Reference","previous_headings":"","what":"Append to chat history — chat_history_append","title":"Append to chat history — chat_history_append","text":"appends new response chat history","code":""},{"path":"/reference/chat_history_append.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append to chat history — chat_history_append","text":"","code":"chat_history_append(history, role, content, name = NULL)"},{"path":"/reference/chat_history_append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append to chat history — chat_history_append","text":"history List containing previous responses. role Author message. One c(\"user\", \"assistant\") content Content message. user probably comes interactive input. name Name author message. Currently used support rendering help pages","code":""},{"path":"/reference/chat_history_append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append to chat history — chat_history_append","text":"list chat messages","code":""},{"path":"/reference/chat_message_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default chat message — chat_message_default","title":"Default chat message — chat_message_default","text":"Default chat message","code":""},{"path":"/reference/chat_message_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default chat message — chat_message_default","text":"","code":"chat_message_default(translator = create_translator())"},{"path":"/reference/chat_message_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default chat message — chat_message_default","text":"translator Translator shiny.i18n::Translator","code":""},{"path":"/reference/chat_message_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default chat message — chat_message_default","text":"default chat message welcoming users.","code":""},{"path":"/reference/check_api_connection_openai.html","id":null,"dir":"Reference","previous_headings":"","what":"Check API Connection — check_api_connection_openai","title":"Check API Connection — check_api_connection_openai","text":"generic function checks API connection specified service dispatching related methods.","code":""},{"path":"/reference/check_api_connection_openai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check API Connection — check_api_connection_openai","text":"","code":"check_api_connection_openai(service, api_key)"},{"path":"/reference/check_api_connection_openai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check API Connection — check_api_connection_openai","text":"service name API service connection checked. api_key API key used authentication.","code":""},{"path":"/reference/check_api_connection_openai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check API Connection — check_api_connection_openai","text":"logical value indicating whether connection successful.","code":""},{"path":"/reference/create_chat_app_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat App Theme — create_chat_app_theme","title":"Chat App Theme — create_chat_app_theme","text":"Create bslib theme matches user's RStudio IDE theme.","code":""},{"path":"/reference/create_chat_app_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat App Theme — create_chat_app_theme","text":"","code":"create_chat_app_theme(ide_colors = get_ide_theme_info())"},{"path":"/reference/create_chat_app_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat App Theme — create_chat_app_theme","text":"ide_colors List containing colors IDE theme.","code":""},{"path":"/reference/create_chat_app_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chat App Theme — create_chat_app_theme","text":"bslib theme","code":""},{"path":"/reference/create_chat_cohere.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a chat with the Cohere Chat API — create_chat_cohere","title":"Create a chat with the Cohere Chat API — create_chat_cohere","text":"function submits user message Cohere Chat API, potentially along parameters chat history connectors, returns API's response.","code":""},{"path":"/reference/create_chat_cohere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a chat with the Cohere Chat API — create_chat_cohere","text":"","code":"create_chat_cohere(   prompt,   chat_history = NULL,   connectors = NULL,   model = \"command\",   api_key = Sys.getenv(\"COHERE_API_KEY\") )"},{"path":"/reference/create_chat_cohere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a chat with the Cohere Chat API — create_chat_cohere","text":"prompt string containing user message. chat_history list previous messages context, . connectors list connector objects, . model string representing Cohere model used, defaulting \"command\". options include \"command-light\", \"command-nightly\", \"command-light-nightly\". api_key API key accessing Cohere API, defaults COHERE_API_KEY environment variable.","code":""},{"path":"/reference/create_chat_cohere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a chat with the Cohere Chat API — create_chat_cohere","text":"response Cohere Chat API containing model's reply.","code":""},{"path":"/reference/create_completion_anthropic.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text completions using Anthropic's API — create_completion_anthropic","title":"Generate text completions using Anthropic's API — create_completion_anthropic","text":"Generate text completions using Anthropic's API","code":""},{"path":"/reference/create_completion_anthropic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text completions using Anthropic's API — create_completion_anthropic","text":"","code":"create_completion_anthropic(   prompt = list(list(role = \"user\", content = \"Hello\")),   system = NULL,   model = \"claude-3-5-sonnet-20240620\",   max_tokens = 1028,   key = Sys.getenv(\"ANTHROPIC_API_KEY\") )"},{"path":"/reference/create_completion_anthropic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text completions using Anthropic's API — create_completion_anthropic","text":"prompt prompt generating completions system system messages instruct model. Defaults NULL. model model use generating text. default, function try use \"claude-2.1\". max_tokens maximum number tokens generate. Defaults 256. key API key accessing Anthropic's API. default, function try use ANTHROPIC_API_KEY environment variable.","code":""},{"path":"/reference/create_completion_anthropic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text completions using Anthropic's API — create_completion_anthropic","text":"list generated completions information returned API.","code":""},{"path":"/reference/create_completion_anthropic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate text completions using Anthropic's API — create_completion_anthropic","text":"","code":"if (FALSE) { # \\dontrun{ create_completion_anthropic(   prompt = \"\\n\\nHuman: Hello, world!\\n\\nAssistant:\",   model = \"claude-3-haiku-20240307\",   max_tokens = 1028 ) } # }"},{"path":"/reference/create_completion_azure_openai.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text using Azure OpenAI's API — create_completion_azure_openai","title":"Generate text using Azure OpenAI's API — create_completion_azure_openai","text":"Use function generate text completions using OpenAI's API.","code":""},{"path":"/reference/create_completion_azure_openai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text using Azure OpenAI's API — create_completion_azure_openai","text":"","code":"create_completion_azure_openai(   prompt,   task = Sys.getenv(\"AZURE_OPENAI_TASK\"),   base_url = Sys.getenv(\"AZURE_OPENAI_ENDPOINT\"),   deployment_name = Sys.getenv(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),   api_key = Sys.getenv(\"AZURE_OPENAI_API_KEY\"),   api_version = Sys.getenv(\"AZURE_OPENAI_API_VERSION\") )"},{"path":"/reference/create_completion_azure_openai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text using Azure OpenAI's API — create_completion_azure_openai","text":"prompt list use prompt generating completions task character string API task (e.g. \"completions\"). Defaults Azure OpenAI task environment variables specified. base_url character string base url. defaults Azure OpenAI endpoint environment variables specified. deployment_name character string deployment name. default Azure OpenAI deployment name environment variables specified. api_key character string API key. default Azure OpenAI API key environment variables specified. api_version character string API version. default Azure OpenAI API version environment variables specified.","code":""},{"path":"/reference/create_completion_azure_openai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text using Azure OpenAI's API — create_completion_azure_openai","text":"list generated completions information returned API","code":""},{"path":"/reference/create_completion_google.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text completions using Google AI Studio's API — create_completion_google","title":"Generate text completions using Google AI Studio's API — create_completion_google","text":"Generate text completions using Google AI Studio's API","code":""},{"path":"/reference/create_completion_google.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text completions using Google AI Studio's API — create_completion_google","text":"","code":"create_completion_google(   prompt,   model = \"gemini-pro\",   key = Sys.getenv(\"GOOGLE_API_KEY\") )"},{"path":"/reference/create_completion_google.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text completions using Google AI Studio's API — create_completion_google","text":"prompt prompt generating completions model model use generating text. default, function try use \"text-bison-001\" key API key accessing Google AI Studio's API. default, function try use GOOGLE_API_KEY environment variable.","code":""},{"path":"/reference/create_completion_google.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text completions using Google AI Studio's API — create_completion_google","text":"list generated completions information returned API.","code":""},{"path":"/reference/create_completion_google.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate text completions using Google AI Studio's API — create_completion_google","text":"","code":"if (FALSE) { # \\dontrun{ create_completion_google(   prompt = \"Write a story about a magic backpack\",   temperature = 1.0,   candidate_count = 3 ) } # }"},{"path":"/reference/create_completion_huggingface.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text completions using HuggingFace's API — create_completion_huggingface","title":"Generate text completions using HuggingFace's API — create_completion_huggingface","text":"Generate text completions using HuggingFace's API","code":""},{"path":"/reference/create_completion_huggingface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text completions using HuggingFace's API — create_completion_huggingface","text":"","code":"create_completion_huggingface(   prompt,   history = NULL,   model = \"tiiuae/falcon-7b-instruct\",   token = Sys.getenv(\"HF_API_KEY\"),   max_new_tokens = 250 )"},{"path":"/reference/create_completion_huggingface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text completions using HuggingFace's API — create_completion_huggingface","text":"prompt prompt generating completions history list previous chat responses model model use generating text token API key accessing HuggingFace's API. default, function try use HF_API_KEY environment variable. max_new_tokens Maximum number tokens generate, defaults 250","code":""},{"path":"/reference/create_completion_huggingface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text completions using HuggingFace's API — create_completion_huggingface","text":"list generated completions information returned API.","code":""},{"path":"/reference/create_completion_huggingface.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate text completions using HuggingFace's API — create_completion_huggingface","text":"","code":"if (FALSE) { # \\dontrun{ create_completion_huggingface(   model = \"gpt2\",   prompt = \"Hello world!\" ) } # }"},{"path":"/reference/create_completion_perplexity.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a chat completion request to the Perplexity API — create_completion_perplexity","title":"Create a chat completion request to the Perplexity API — create_completion_perplexity","text":"function sends series messages alongside chosen model Perplexity API generate chat completion. returns API's generated responses.","code":""},{"path":"/reference/create_completion_perplexity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a chat completion request to the Perplexity API — create_completion_perplexity","text":"","code":"create_completion_perplexity(   prompt,   model = \"mistral-7b-instruct\",   api_key = Sys.getenv(\"PERPLEXITY_API_KEY\") )"},{"path":"/reference/create_completion_perplexity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a chat completion request to the Perplexity API — create_completion_perplexity","text":"prompt list containing prompts sent chat. model character string representing Perplexity model used. Defaults \"mistral-7b-instruct\". api_key API key accessing Perplexity API. Defaults PERPLEXITY_API_KEY environment variable.","code":""},{"path":"/reference/create_completion_perplexity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a chat completion request to the Perplexity API — create_completion_perplexity","text":"response Perplexity API containing completion chat.","code":""},{"path":"/reference/create_ide_matching_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat message colors in RStudio — create_ide_matching_colors","title":"Chat message colors in RStudio — create_ide_matching_colors","text":"returns list color properties chat message","code":""},{"path":"/reference/create_ide_matching_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat message colors in RStudio — create_ide_matching_colors","text":"","code":"create_ide_matching_colors(   role = c(\"user\", \"assistant\"),   ide_colors = get_ide_theme_info() )"},{"path":"/reference/create_ide_matching_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat message colors in RStudio — create_ide_matching_colors","text":"role role message author ide_colors List containing colors IDE theme.","code":""},{"path":"/reference/create_ide_matching_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chat message colors in RStudio — create_ide_matching_colors","text":"list","code":""},{"path":"/reference/create_translator.html","id":null,"dir":"Reference","previous_headings":"","what":"Internationalization for the ChatGPT addin — create_translator","title":"Internationalization for the ChatGPT addin — create_translator","text":"language can set via options(\"gptstudio.language\" = \"<language>\") (defaults \"en\").","code":""},{"path":"/reference/create_translator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internationalization for the ChatGPT addin — create_translator","text":"","code":"create_translator(language = getOption(\"gptstudio.language\"))"},{"path":"/reference/create_translator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internationalization for the ChatGPT addin — create_translator","text":"language language found translation JSON file.","code":""},{"path":"/reference/create_translator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internationalization for the ChatGPT addin — create_translator","text":"Translator shiny.i18n::Translator","code":""},{"path":"/reference/encode_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode an image file to base64 — encode_image","title":"Encode an image file to base64 — encode_image","text":"Encode image file base64","code":""},{"path":"/reference/encode_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode an image file to base64 — encode_image","text":"","code":"encode_image(image_path)"},{"path":"/reference/encode_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode an image file to base64 — encode_image","text":"image_path String containing path image file","code":""},{"path":"/reference/encode_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode an image file to base64 — encode_image","text":"base64 encoded string image","code":""},{"path":"/reference/get_available_endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"List supported endpoints — get_available_endpoints","title":"List supported endpoints — get_available_endpoints","text":"Get list endpoints supported gptstudio.","code":""},{"path":"/reference/get_available_endpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List supported endpoints — get_available_endpoints","text":"","code":"get_available_endpoints()"},{"path":"/reference/get_available_endpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List supported endpoints — get_available_endpoints","text":"character vector","code":""},{"path":"/reference/get_available_endpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List supported endpoints — get_available_endpoints","text":"","code":"get_available_endpoints() #> [1] \"completions\"      \"chat/completions\" \"edits\"            \"embeddings\"       #> [5] \"models\""},{"path":"/reference/get_available_models.html","id":null,"dir":"Reference","previous_headings":"","what":"List supported models — get_available_models","title":"List supported models — get_available_models","text":"Get list models supported OpenAI API.","code":""},{"path":"/reference/get_available_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List supported models — get_available_models","text":"","code":"get_available_models(service)"},{"path":"/reference/get_available_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List supported models — get_available_models","text":"service API service","code":""},{"path":"/reference/get_available_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List supported models — get_available_models","text":"character vector","code":""},{"path":"/reference/get_available_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List supported models — get_available_models","text":"","code":"if (FALSE) { # \\dontrun{ get_available_models() } # }"},{"path":"/reference/get_ide_theme_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get IDE Theme Information — get_ide_theme_info","title":"Get IDE Theme Information — get_ide_theme_info","text":"Retrieves current RStudio IDE theme information including whether dark theme, background foreground colors hexadecimal format.","code":""},{"path":"/reference/get_ide_theme_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get IDE Theme Information — get_ide_theme_info","text":"","code":"get_ide_theme_info()"},{"path":"/reference/get_ide_theme_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get IDE Theme Information — get_ide_theme_info","text":"list following components: is_dark logical indicating whether current IDE theme dark. bg character string representing background color IDE theme hex format. fg character string representing foreground color IDE theme hex format. RStudio unavailable, returns fallback theme details.","code":""},{"path":"/reference/get_ide_theme_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get IDE Theme Information — get_ide_theme_info","text":"","code":"theme_info <- get_ide_theme_info() print(theme_info) #> $is_dark #> [1] TRUE #>  #> $bg #> [1] \"#181818\" #>  #> $fg #> [1] \"#C1C1C1\" #>"},{"path":"/reference/gptstudio-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gptstudio: Use Large Language Models Directly in your Development Environment — gptstudio-package","title":"gptstudio: Use Large Language Models Directly in your Development Environment — gptstudio-package","text":"Large language models readily accessible via API. package lowers barrier use API inside development environment. API, see https://platform.openai.com/docs/introduction.","code":""},{"path":[]},{"path":"/reference/gptstudio-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gptstudio: Use Large Language Models Directly in your Development Environment — gptstudio-package","text":"Maintainer: James Wade github@jameshwade.com (ORCID) [copyright holder] Authors: Michel Nivard m.g.nivard@vu.nl [copyright holder] Samuel Calderon samuel.calderon@uarm.pe (ORCID)","code":""},{"path":"/reference/gptstudio_cache_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"a function that determines the appropriate directory to cache a token — gptstudio_cache_directory","title":"a function that determines the appropriate directory to cache a token — gptstudio_cache_directory","text":"function determines appropriate directory cache token","code":""},{"path":"/reference/gptstudio_cache_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a function that determines the appropriate directory to cache a token — gptstudio_cache_directory","text":"","code":"gptstudio_cache_directory()"},{"path":"/reference/gptstudio_chat.html","id":null,"dir":"Reference","previous_headings":"","what":"Run GPTStudio Chat App — gptstudio_chat","title":"Run GPTStudio Chat App — gptstudio_chat","text":"function initializes runs Chat GPT Shiny App background job RStudio opens viewer pane browser window.","code":""},{"path":"/reference/gptstudio_chat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run GPTStudio Chat App — gptstudio_chat","text":"","code":"gptstudio_chat(host = getOption(\"shiny.host\", \"127.0.0.1\"))"},{"path":"/reference/gptstudio_chat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run GPTStudio Chat App — gptstudio_chat","text":"host character string specifying host run app. Defaults value getOption(\"shiny.host\", \"127.0.0.1\").","code":""},{"path":"/reference/gptstudio_chat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run GPTStudio Chat App — gptstudio_chat","text":"function return value. runs Shiny app side effect.","code":""},{"path":"/reference/gptstudio_chat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run GPTStudio Chat App — gptstudio_chat","text":"function performs following steps: Verifies RStudio API available. Finds available port Shiny app. Creates temporary directory app files. Runs app background job RStudio. Opens app RStudio viewer pane browser window.","code":""},{"path":"/reference/gptstudio_chat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Run GPTStudio Chat App — gptstudio_chat","text":"function designed work within RStudio IDE requires rstudioapi package.","code":""},{"path":"/reference/gptstudio_chat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run GPTStudio Chat App — gptstudio_chat","text":"","code":"if (FALSE) { # \\dontrun{ gptstudio_chat() } # }"},{"path":"/reference/gptstudio_chat_in_source_addin.html","id":null,"dir":"Reference","previous_headings":"","what":"ChatGPT in Source — gptstudio_chat_in_source_addin","title":"ChatGPT in Source — gptstudio_chat_in_source_addin","text":"Call function Rstudio addin ask GPT improve spelling grammar selected text.","code":""},{"path":"/reference/gptstudio_chat_in_source_addin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ChatGPT in Source — gptstudio_chat_in_source_addin","text":"","code":"gptstudio_chat_in_source_addin()"},{"path":"/reference/gptstudio_chat_in_source_addin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ChatGPT in Source — gptstudio_chat_in_source_addin","text":"function return value.","code":""},{"path":"/reference/gptstudio_chat_in_source_addin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ChatGPT in Source — gptstudio_chat_in_source_addin","text":"","code":"# Select some text in a source file # Then call the function as an RStudio addin if (FALSE) { # \\dontrun{ gptstudio_chat_in_source() } # }"},{"path":"/reference/gptstudio_comment_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Comment Code Addin — gptstudio_comment_code","title":"Comment Code Addin — gptstudio_comment_code","text":"Call function Rstudio addin ask GPT add comments code","code":""},{"path":"/reference/gptstudio_comment_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comment Code Addin — gptstudio_comment_code","text":"","code":"gptstudio_comment_code()"},{"path":"/reference/gptstudio_comment_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comment Code Addin — gptstudio_comment_code","text":"function return value.","code":""},{"path":"/reference/gptstudio_comment_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comment Code Addin — gptstudio_comment_code","text":"","code":"# Open a R file in Rstudio # Then call the function as an RStudio addin if (FALSE) { # \\dontrun{ gptstudio_comment_code() } # }"},{"path":"/reference/gptstudio_create_skeleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Request Skeleton — gptstudio_create_skeleton","title":"Create a Request Skeleton — gptstudio_create_skeleton","text":"function dynamically creates request skeleton different AI text generation services.","code":""},{"path":"/reference/gptstudio_create_skeleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Request Skeleton — gptstudio_create_skeleton","text":"","code":"gptstudio_create_skeleton(   service = \"openai\",   prompt = \"Name the top 5 packages in R.\",   history = list(list(role = \"system\", content = \"You are an R chat assistant\")),   stream = TRUE,   model = \"gpt-4o-mini\",   ... )"},{"path":"/reference/gptstudio_create_skeleton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Request Skeleton — gptstudio_create_skeleton","text":"service text generation service use. Currently supports \"openai\", \"huggingface\", \"anthropic\", \"google\", \"azure_openai\", \"ollama\", \"perplexity\". prompt initial prompt question pass text generation service. history list indicating conversation history, element list elements \"role\" (speaking; e.g., \"system\", \"user\") \"content\" (said). stream Logical; indicates streaming responses used. Currently, option supported across services. model specific model use generating responses. Defaults \"gpt-3.5-turbo\". ... Additional arguments passed service-specific skeleton creation function.","code":""},{"path":"/reference/gptstudio_create_skeleton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Request Skeleton — gptstudio_create_skeleton","text":"Depending selected service, returns list represents configured request ready passed corresponding API.","code":""},{"path":"/reference/gptstudio_create_skeleton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Request Skeleton — gptstudio_create_skeleton","text":"","code":"if (FALSE) { # \\dontrun{ request_skeleton <- gptstudio_create_skeleton(   service = \"openai\",   prompt = \"Name the top 5 packages in R.\",   history = list(list(role = \"system\", content = \"You are an R assistant\")),   stream = TRUE,   model = \"gpt-3.5-turbo\" ) } # }"},{"path":"/reference/gptstudio_request_perform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform API Request — gptstudio_request_perform","title":"Perform API Request — gptstudio_request_perform","text":"function provides generic interface calling different APIs (e.g., OpenAI, HuggingFace, Google AI Studio). dispatches actual API calls relevant method based class skeleton argument.","code":""},{"path":"/reference/gptstudio_request_perform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform API Request — gptstudio_request_perform","text":"","code":"gptstudio_request_perform(skeleton, ...)"},{"path":"/reference/gptstudio_request_perform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform API Request — gptstudio_request_perform","text":"skeleton gptstudio_request_skeleton object ... Extra arguments (e.g., stream_handler)","code":""},{"path":"/reference/gptstudio_request_perform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform API Request — gptstudio_request_perform","text":"gptstudio_response_skeleton object","code":""},{"path":"/reference/gptstudio_request_perform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform API Request — gptstudio_request_perform","text":"","code":"if (FALSE) { # \\dontrun{ gptstudio_request_perform(gptstudio_skeleton) } # }"},{"path":"/reference/gptstudio_response_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Call API — gptstudio_response_process","title":"Call API — gptstudio_response_process","text":"function provides generic interface calling different APIs (e.g., OpenAI, HuggingFace, Google AI Studio). dispatches actual API calls relevant method based class skeleton argument.","code":""},{"path":"/reference/gptstudio_response_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call API — gptstudio_response_process","text":"","code":"gptstudio_response_process(skeleton, ...)"},{"path":"/reference/gptstudio_response_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call API — gptstudio_response_process","text":"skeleton gptstudio_response_skeleton object ... Extra arguments, currently used","code":""},{"path":"/reference/gptstudio_response_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call API — gptstudio_response_process","text":"gptstudio_request_skeleton updated history prompt removed","code":""},{"path":"/reference/gptstudio_response_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call API — gptstudio_response_process","text":"","code":"if (FALSE) { # \\dontrun{ gptstudio_response_process(gptstudio_skeleton) } # }"},{"path":"/reference/gptstudio_run_chat_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the ChatGPT app — gptstudio_run_chat_app","title":"Run the ChatGPT app — gptstudio_run_chat_app","text":"starts chatgpt app. exported able run R script.","code":""},{"path":"/reference/gptstudio_run_chat_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the ChatGPT app — gptstudio_run_chat_app","text":"","code":"gptstudio_run_chat_app(   ide_colors = get_ide_theme_info(),   code_theme_url = get_highlightjs_theme(),   host = getOption(\"shiny.host\", \"127.0.0.1\"),   port = getOption(\"shiny.port\") )"},{"path":"/reference/gptstudio_run_chat_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the ChatGPT app — gptstudio_run_chat_app","text":"ide_colors List containing colors IDE theme. code_theme_url URL highlight.js theme host IPv4 address application listen . Defaults shiny.host option, set, \"127.0.0.1\" . See Details. port TCP port application listen . port specified, shiny.port option set (options(shiny.port = XX)), port used. Otherwise, use random port 3000:8000, excluding ports blocked Google Chrome considered unsafe: 3659, 4045, 5060, 5061, 6000, 6566, 6665:6669 6697. twenty random ports tried.","code":""},{"path":"/reference/gptstudio_run_chat_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the ChatGPT app — gptstudio_run_chat_app","text":"Nothing.","code":""},{"path":"/reference/gptstudio_sitrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Current Configuration for gptstudio — gptstudio_sitrep","title":"Current Configuration for gptstudio — gptstudio_sitrep","text":"function prints current configuration settings gptstudio checks API connections verbose TRUE.","code":""},{"path":"/reference/gptstudio_sitrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current Configuration for gptstudio — gptstudio_sitrep","text":"","code":"gptstudio_sitrep(verbose = TRUE)"},{"path":"/reference/gptstudio_sitrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current Configuration for gptstudio — gptstudio_sitrep","text":"verbose Logical value indicating whether output additional information, API connection checks. Defaults TRUE.","code":""},{"path":"/reference/gptstudio_sitrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current Configuration for gptstudio — gptstudio_sitrep","text":"Invisibly returns NULL, primary purpose function print console.","code":""},{"path":"/reference/gptstudio_sitrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current Configuration for gptstudio — gptstudio_sitrep","text":"","code":"if (FALSE) { # \\dontrun{ gptstudio_sitrep(verbose = FALSE) # Print basic settings, no API checks gptstudio_sitrep() # Print settings and check API connections } # }"},{"path":"/reference/gptstudio_skeleton_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a GPT Studio request skeleton. — gptstudio_skeleton_build","title":"Construct a GPT Studio request skeleton. — gptstudio_skeleton_build","text":"Construct GPT Studio request skeleton.","code":""},{"path":"/reference/gptstudio_skeleton_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a GPT Studio request skeleton. — gptstudio_skeleton_build","text":"","code":"gptstudio_skeleton_build(skeleton, skill, style, task, custom_prompt, ...)"},{"path":"/reference/gptstudio_skeleton_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a GPT Studio request skeleton. — gptstudio_skeleton_build","text":"skeleton GPT Studio request skeleton object. skill skill level user chat conversation. can set \"gptstudio.skill\" option. Default \"gptstudio.skill\" option. Options \"beginner\", \"intermediate\", \"advanced\", \"genius\". style style code use. Applicable styles can retrieved \"gptstudio.code_style\" option. Default \"gptstudio.code_style\" option. Options \"base\", \"tidyverse\", \"preference\". task Specifies task assistant help . Default \"coding\". Others \"general\", \"advanced developer\", \"custom\". custom_prompt custom prompt may used guide AI responses. Default NULL. content provided system prompt. ... Additional arguments.","code":""},{"path":"/reference/gptstudio_skeleton_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a GPT Studio request skeleton. — gptstudio_skeleton_build","text":"updated GPT Studio request skeleton.","code":""},{"path":"/reference/gptstudio_spelling_grammar.html","id":null,"dir":"Reference","previous_headings":"","what":"Spelling and Grammar Addin — gptstudio_spelling_grammar","title":"Spelling and Grammar Addin — gptstudio_spelling_grammar","text":"Call function Rstudio addin ask GPT improve spelling grammar selected text.","code":""},{"path":"/reference/gptstudio_spelling_grammar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spelling and Grammar Addin — gptstudio_spelling_grammar","text":"","code":"gptstudio_spelling_grammar()"},{"path":"/reference/gptstudio_spelling_grammar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spelling and Grammar Addin — gptstudio_spelling_grammar","text":"function return value.","code":""},{"path":"/reference/gptstudio_spelling_grammar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spelling and Grammar Addin — gptstudio_spelling_grammar","text":"","code":"# Select some text in Rstudio # Then call the function as an RStudio addin if (FALSE) { # \\dontrun{ gptstudio_spelling_grammar() } # }"},{"path":"/reference/input_audio_clip.html","id":null,"dir":"Reference","previous_headings":"","what":"An audio clip input control that records short audio clips from the microphone — input_audio_clip","title":"An audio clip input control that records short audio clips from the microphone — input_audio_clip","text":"audio clip input control records short audio clips microphone","code":""},{"path":"/reference/input_audio_clip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An audio clip input control that records short audio clips from the microphone — input_audio_clip","text":"","code":"input_audio_clip(   id,   record_label = \"Record\",   stop_label = \"Stop\",   reset_on_record = TRUE,   mime_type = NULL,   audio_bits_per_second = NULL,   show_mic_settings = TRUE,   ... )"},{"path":"/reference/input_audio_clip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An audio clip input control that records short audio clips from the microphone — input_audio_clip","text":"id input slot used access value. record_label Display label \"record\" control, NULL label. Default 'Record'. stop_label Display label \"stop\" control, NULL label. Default 'Record'. reset_on_record Whether reset audio clip input value recording starts. TRUE, audio clip input value become NULL moment Record button pressed; FALSE, value change user stops recording. Default TRUE. mime_type MIME type audio clip record. default, NULL, means browser choose suitable MIME type audio recording. Common MIME types include 'audio/webm' 'audio/mp4'. audio_bits_per_second target audio bitrate bits per second. default, NULL, means browser choose suitable bitrate audio recording. suggestion; browser may choose different bitrate. show_mic_settings Whether show microphone settings settings menu. Default TRUE. ... Additional parameters pass underlying HTML tag.","code":""},{"path":"/reference/input_audio_clip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An audio clip input control that records short audio clips from the microphone — input_audio_clip","text":"audio clip input control can added UI definition.","code":""},{"path":"/reference/mod_app_server.html","id":null,"dir":"Reference","previous_headings":"","what":"App Server — mod_app_server","title":"App Server — mod_app_server","text":"App Server","code":""},{"path":"/reference/mod_app_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"App Server — mod_app_server","text":"","code":"mod_app_server(id, ide_colors = get_ide_theme_info())"},{"path":"/reference/mod_app_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"App Server — mod_app_server","text":"id id module ide_colors List containing colors IDE theme.","code":""},{"path":"/reference/mod_app_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"App UI — mod_app_ui","title":"App UI — mod_app_ui","text":"App UI","code":""},{"path":"/reference/mod_app_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"App UI — mod_app_ui","text":"","code":"mod_app_ui(   id,   ide_colors = get_ide_theme_info(),   code_theme_url = get_highlightjs_theme() )"},{"path":"/reference/mod_app_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"App UI — mod_app_ui","text":"id id module ide_colors List containing colors IDE theme. code_theme_url URL highlight.js theme","code":""},{"path":"/reference/mod_chat_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat server — mod_chat_server","title":"Chat server — mod_chat_server","text":"Chat server","code":""},{"path":"/reference/mod_chat_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat server — mod_chat_server","text":"","code":"mod_chat_server(   id,   ide_colors = get_ide_theme_info(),   translator = create_translator(),   settings,   history )"},{"path":"/reference/mod_chat_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat server — mod_chat_server","text":"id id module ide_colors List containing colors IDE theme. translator Translator shiny.i18n::Translator settings, history Reactive values settings history module","code":""},{"path":"/reference/mod_chat_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat UI — mod_chat_ui","title":"Chat UI — mod_chat_ui","text":"Chat UI","code":""},{"path":"/reference/mod_chat_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat UI — mod_chat_ui","text":"","code":"mod_chat_ui(   id,   translator = create_translator(),   code_theme_url = get_highlightjs_theme() )"},{"path":"/reference/mod_chat_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat UI — mod_chat_ui","text":"id id module translator Translator shiny.i18n::Translator code_theme_url URL highlight.js theme","code":""},{"path":"/reference/multimodal_dep.html","id":null,"dir":"Reference","previous_headings":"","what":"Create HTML dependency for multimodal component — multimodal_dep","title":"Create HTML dependency for multimodal component — multimodal_dep","text":"Create HTML dependency multimodal component","code":""},{"path":"/reference/multimodal_dep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create HTML dependency for multimodal component — multimodal_dep","text":"","code":"multimodal_dep()"},{"path":"/reference/openai_create_chat_completion.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text completions using OpenAI's API for Chat — openai_create_chat_completion","title":"Generate text completions using OpenAI's API for Chat — openai_create_chat_completion","text":"Generate text completions using OpenAI's API Chat","code":""},{"path":"/reference/openai_create_chat_completion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text completions using OpenAI's API for Chat — openai_create_chat_completion","text":"","code":"openai_create_chat_completion(   prompt = \"<|endoftext|>\",   model = getOption(\"gptstudio.model\"),   openai_api_key = Sys.getenv(\"OPENAI_API_KEY\"),   task = \"chat/completions\" )"},{"path":"/reference/openai_create_chat_completion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text completions using OpenAI's API for Chat — openai_create_chat_completion","text":"prompt prompt generating completions model model use generating text openai_api_key API key accessing OpenAI's API. default, function try use OPENAI_API_KEY environment variable. task task specifies API url use, defaults \"completions\" \"chat/completions\" required ChatGPT model.","code":""},{"path":"/reference/openai_create_chat_completion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text completions using OpenAI's API for Chat — openai_create_chat_completion","text":"list generated completions information returned API.","code":""},{"path":"/reference/openai_create_chat_completion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate text completions using OpenAI's API for Chat — openai_create_chat_completion","text":"","code":"if (FALSE) { # \\dontrun{ openai_create_completion(   model = \"text-davinci-002\",   prompt = \"Hello world!\" ) } # }"},{"path":"/reference/parse_data_uri.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a Data URI — parse_data_uri","title":"Parse a Data URI — parse_data_uri","text":"function parses data URI returns MIME type decoded data.","code":""},{"path":"/reference/parse_data_uri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a Data URI — parse_data_uri","text":"","code":"parse_data_uri(data_uri)"},{"path":"/reference/parse_data_uri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a Data URI — parse_data_uri","text":"data_uri string. data URI parse.","code":""},{"path":"/reference/parse_data_uri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a Data URI — parse_data_uri","text":"list two elements: 'mime_type' 'data'.","code":""},{"path":"/reference/prepare_chat_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare chat completion prompt — prepare_chat_history","title":"Prepare chat completion prompt — prepare_chat_history","text":"function prepares chat completion prompt sent OpenAI API. also generates system message according given parameters inserts beginning conversation.","code":""},{"path":"/reference/prepare_chat_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare chat completion prompt — prepare_chat_history","text":"","code":"prepare_chat_history(   history = NULL,   style = getOption(\"gptstudio.code_style\"),   skill = getOption(\"gptstudio.skill\"),   task = \"coding\",   custom_prompt = NULL )"},{"path":"/reference/prepare_chat_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare chat completion prompt — prepare_chat_history","text":"history list previous messages conversation. can include roles 'system', 'user', 'assistant'. System messages discarded. Default NULL.style style code use. Applicable styles can retrieved \"gptstudio.code_style\" option. Default \"gptstudio.code_style\" option. Options \"base\", \"tidyverse\", \"preference\". skill skill level user chat conversation. can set \"gptstudio.skill\" option. Default \"gptstudio.skill\" option. Options \"beginner\", \"intermediate\", \"advanced\", \"genius\". task Specifies task assistant help . Default \"coding\". Others \"general\", \"advanced developer\", \"custom\". custom_prompt custom prompt may used guide AI responses. Default NULL. content provided system prompt.","code":""},{"path":"/reference/prepare_chat_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare chat completion prompt — prepare_chat_history","text":"list first entry initial system message followed non-system entries chat history.","code":""},{"path":"/reference/query_api_anthropic.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that sends a request to the Anthropic API and returns the response. — query_api_anthropic","title":"A function that sends a request to the Anthropic API and returns the response. — query_api_anthropic","text":"function sends request Anthropic API returns response.","code":""},{"path":"/reference/query_api_anthropic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that sends a request to the Anthropic API and returns the response. — query_api_anthropic","text":"","code":"query_api_anthropic(request_body, key = Sys.getenv(\"ANTHROPIC_API_KEY\"))"},{"path":"/reference/query_api_anthropic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that sends a request to the Anthropic API and returns the response. — query_api_anthropic","text":"request_body list contains parameters task. key String containing Anthropic API key. Defaults ANTHROPIC_API_KEY environmental variable specified.","code":""},{"path":"/reference/query_api_anthropic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function that sends a request to the Anthropic API and returns the response. — query_api_anthropic","text":"response API.","code":""},{"path":"/reference/query_api_cohere.html","id":null,"dir":"Reference","previous_headings":"","what":"Send a request to the Cohere Chat API and return the response — query_api_cohere","title":"Send a request to the Cohere Chat API and return the response — query_api_cohere","text":"function sends JSON post request Cohere Chat API, retries failure three times, returns response. function handles errors providing descriptive message failing gracefully.","code":""},{"path":"/reference/query_api_cohere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send a request to the Cohere Chat API and return the response — query_api_cohere","text":"","code":"query_api_cohere(request_body, api_key = Sys.getenv(\"COHERE_API_KEY\"))"},{"path":"/reference/query_api_cohere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send a request to the Cohere Chat API and return the response — query_api_cohere","text":"request_body list containing body POST request. api_key String containing Cohere API key. Defaults COHERE_API_KEY environmental variable specified.","code":""},{"path":"/reference/query_api_cohere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send a request to the Cohere Chat API and return the response — query_api_cohere","text":"parsed JSON object API response.","code":""},{"path":"/reference/query_api_google.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that sends a request to the Google AI Studio API and returns the response. — query_api_google","title":"A function that sends a request to the Google AI Studio API and returns the response. — query_api_google","text":"function sends request Google AI Studio API returns response.","code":""},{"path":"/reference/query_api_google.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that sends a request to the Google AI Studio API and returns the response. — query_api_google","text":"","code":"query_api_google(model, request_body, key = Sys.getenv(\"GOOGLE_API_KEY\"))"},{"path":"/reference/query_api_google.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that sends a request to the Google AI Studio API and returns the response. — query_api_google","text":"model character string specifies model send API. request_body list contains parameters task. key String containing Google AI Studio API key. Defaults GOOGLE_API_KEY environmental variable specified.","code":""},{"path":"/reference/query_api_google.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function that sends a request to the Google AI Studio API and returns the response. — query_api_google","text":"response API.","code":""},{"path":"/reference/query_api_huggingface.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that sends a request to the HuggingFace API and returns the response. — query_api_huggingface","title":"A function that sends a request to the HuggingFace API and returns the response. — query_api_huggingface","text":"function sends request HuggingFace API returns response.","code":""},{"path":"/reference/query_api_huggingface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that sends a request to the HuggingFace API and returns the response. — query_api_huggingface","text":"","code":"query_api_huggingface(task, request_body, token = Sys.getenv(\"HF_API_KEY\"))"},{"path":"/reference/query_api_huggingface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that sends a request to the HuggingFace API and returns the response. — query_api_huggingface","text":"task character string specifies task send API. request_body list contains parameters task. token String containing HuggingFace API key. Defaults HF_API_KEY environmental variable specified.","code":""},{"path":"/reference/query_api_huggingface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function that sends a request to the HuggingFace API and returns the response. — query_api_huggingface","text":"response API.","code":""},{"path":"/reference/query_api_openai.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that sends a request to the OpenAI API and returns the response. — query_api_openai","title":"A function that sends a request to the OpenAI API and returns the response. — query_api_openai","text":"function sends request OpenAI API returns response.","code":""},{"path":"/reference/query_api_openai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that sends a request to the OpenAI API and returns the response. — query_api_openai","text":"","code":"query_api_openai(   task,   request_body,   openai_api_key = Sys.getenv(\"OPENAI_API_KEY\") )"},{"path":"/reference/query_api_openai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that sends a request to the OpenAI API and returns the response. — query_api_openai","text":"task character string specifies task send API. request_body list contains parameters task. openai_api_key String containing OpenAI API key. Defaults OPENAI_API_KEY environmental variable specified.","code":""},{"path":"/reference/query_api_openai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function that sends a request to the OpenAI API and returns the response. — query_api_openai","text":"response API.","code":""},{"path":"/reference/query_api_perplexity.html","id":null,"dir":"Reference","previous_headings":"","what":"Send a request to the Perplexity API and return the response — query_api_perplexity","title":"Send a request to the Perplexity API and return the response — query_api_perplexity","text":"function sends JSON post request Perplexity API, retries failure three times, returns response. function handles errors providing descriptive message failing gracefully.","code":""},{"path":"/reference/query_api_perplexity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send a request to the Perplexity API and return the response — query_api_perplexity","text":"","code":"query_api_perplexity(request_body, api_key = Sys.getenv(\"PERPLEXITY_API_KEY\"))"},{"path":"/reference/query_api_perplexity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send a request to the Perplexity API and return the response — query_api_perplexity","text":"request_body list containing body POST request. api_key String containing Perplexity API key. Defaults PERPLEXITY_API_KEY environmental variable specified.","code":""},{"path":"/reference/query_api_perplexity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send a request to the Perplexity API and return the response — query_api_perplexity","text":"parsed JSON object API response.","code":""},{"path":"/reference/request_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Base for a request to the OPENAI API — request_base","title":"Base for a request to the OPENAI API — request_base","text":"function sends request specific OpenAI API task endpoint base URL https://api.openai.com/v1, authenticates API key using Bearer token.","code":""},{"path":"/reference/request_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base for a request to the OPENAI API — request_base","text":"","code":"request_base(task, token = Sys.getenv(\"OPENAI_API_KEY\"))"},{"path":"/reference/request_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base for a request to the OPENAI API — request_base","text":"task character string specifying OpenAI API endpoint task token String containing OpenAI API key. Defaults OPENAI_API_KEY environmental variable specified.","code":""},{"path":"/reference/request_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base for a request to the OPENAI API — request_base","text":"httr2 request object","code":""},{"path":"/reference/request_base_anthropic.html","id":null,"dir":"Reference","previous_headings":"","what":"Base for a request to the Anthropic API — request_base_anthropic","title":"Base for a request to the Anthropic API — request_base_anthropic","text":"function sends request Anthropic API endpoint authenticates API key.","code":""},{"path":"/reference/request_base_anthropic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base for a request to the Anthropic API — request_base_anthropic","text":"","code":"request_base_anthropic(key = Sys.getenv(\"ANTHROPIC_API_KEY\"))"},{"path":"/reference/request_base_anthropic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base for a request to the Anthropic API — request_base_anthropic","text":"key String containing Anthropic API key. Defaults ANTHROPIC_API_KEY environmental variable specified.","code":""},{"path":"/reference/request_base_anthropic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base for a request to the Anthropic API — request_base_anthropic","text":"httr2 request object","code":""},{"path":"/reference/request_base_cohere.html","id":null,"dir":"Reference","previous_headings":"","what":"Base for a request to the Cohere Chat API — request_base_cohere","title":"Base for a request to the Cohere Chat API — request_base_cohere","text":"function sets POST request Cohere Chat API's chat endpoint includes necessary headers 'accept', 'content-type', 'Authorization' bearer token.","code":""},{"path":"/reference/request_base_cohere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base for a request to the Cohere Chat API — request_base_cohere","text":"","code":"request_base_cohere(api_key = Sys.getenv(\"COHERE_API_KEY\"))"},{"path":"/reference/request_base_cohere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base for a request to the Cohere Chat API — request_base_cohere","text":"api_key String containing Cohere API key. Defaults COHERE_API_KEY environment variable specified.","code":""},{"path":"/reference/request_base_cohere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base for a request to the Cohere Chat API — request_base_cohere","text":"httr2 request object pre-configured API endpoint required headers.","code":""},{"path":"/reference/request_base_google.html","id":null,"dir":"Reference","previous_headings":"","what":"Base for a request to the Google AI Studio API — request_base_google","title":"Base for a request to the Google AI Studio API — request_base_google","text":"function sends request specific Google AI Studio API endpoint authenticates API key.","code":""},{"path":"/reference/request_base_google.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base for a request to the Google AI Studio API — request_base_google","text":"","code":"request_base_google(model, key = Sys.getenv(\"GOOGLE_API_KEY\"))"},{"path":"/reference/request_base_google.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base for a request to the Google AI Studio API — request_base_google","text":"model character string specifying Google AI Studio API model key String containing Google AI Studio API key. Defaults GOOGLE_API_KEY environmental variable specified.","code":""},{"path":"/reference/request_base_google.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base for a request to the Google AI Studio API — request_base_google","text":"httr2 request object","code":""},{"path":"/reference/request_base_huggingface.html","id":null,"dir":"Reference","previous_headings":"","what":"Base for a request to the HuggingFace API — request_base_huggingface","title":"Base for a request to the HuggingFace API — request_base_huggingface","text":"function sends request specific HuggingFace API endpoint authenticates API key using Bearer token.","code":""},{"path":"/reference/request_base_huggingface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base for a request to the HuggingFace API — request_base_huggingface","text":"","code":"request_base_huggingface(task, token = Sys.getenv(\"HF_API_KEY\"))"},{"path":"/reference/request_base_huggingface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base for a request to the HuggingFace API — request_base_huggingface","text":"task character string specifying HuggingFace API endpoint task token String containing HuggingFace API key. Defaults HF_API_KEY environmental variable specified.","code":""},{"path":"/reference/request_base_huggingface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base for a request to the HuggingFace API — request_base_huggingface","text":"httr2 request object","code":""},{"path":"/reference/request_base_perplexity.html","id":null,"dir":"Reference","previous_headings":"","what":"Base for a request to the Perplexity API — request_base_perplexity","title":"Base for a request to the Perplexity API — request_base_perplexity","text":"function sets POST request Perplexity API's chat/completions endpoint includes necessary headers 'accept', 'content-type', 'Authorization' bearer token.","code":""},{"path":"/reference/request_base_perplexity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base for a request to the Perplexity API — request_base_perplexity","text":"","code":"request_base_perplexity(api_key = Sys.getenv(\"PERPLEXITY_API_KEY\"))"},{"path":"/reference/request_base_perplexity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base for a request to the Perplexity API — request_base_perplexity","text":"api_key String containing Perplexity API key. Defaults PERPLEXITY_API_KEY environment variable specified.","code":""},{"path":"/reference/request_base_perplexity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base for a request to the Perplexity API — request_base_perplexity","text":"httr2 request object pre-configured API endpoint required headers.","code":""},{"path":"/reference/rgb_str_to_hex.html","id":null,"dir":"Reference","previous_headings":"","what":"RGB str to hex — rgb_str_to_hex","title":"RGB str to hex — rgb_str_to_hex","text":"RGB str hex","code":""},{"path":"/reference/rgb_str_to_hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RGB str to hex — rgb_str_to_hex","text":"","code":"rgb_str_to_hex(rgb_string)"},{"path":"/reference/rgb_str_to_hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RGB str to hex — rgb_str_to_hex","text":"rgb_string RGB string returned rstudioapi::getThemeInfo()","code":""},{"path":"/reference/rgb_str_to_hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RGB str to hex — rgb_str_to_hex","text":"hex color","code":""},{"path":"/reference/stream_chat_completion.html","id":null,"dir":"Reference","previous_headings":"","what":"Stream Chat Completion — stream_chat_completion","title":"Stream Chat Completion — stream_chat_completion","text":"stream_chat_completion sends prepared chat completion request OpenAI API retrieves streamed response.","code":""},{"path":"/reference/stream_chat_completion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream Chat Completion — stream_chat_completion","text":"","code":"stream_chat_completion(   messages = list(list(role = \"user\", content = \"Hi there!\")),   element_callback = openai_handler,   model = \"gpt-4o-mini\",   openai_api_key = Sys.getenv(\"OPENAI_API_KEY\") )"},{"path":"/reference/stream_chat_completion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream Chat Completion — stream_chat_completion","text":"messages list messages conversation, including current user prompt (optional). element_callback callback function handle element streamed response (optional). model character string specifying model use chat completion. default model \"gpt-4o-mini\". openai_api_key character string OpenAI API key. default, fetched \"OPENAI_API_KEY\" environment variable. Please note OpenAI API key sensitive information treated accordingly.","code":""},{"path":"/reference/stream_chat_completion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stream Chat Completion — stream_chat_completion","text":"httr2::req_perform_stream","code":""},{"path":"/reference/streamingMessage-shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny bindings for streamingMessage — streamingMessage-shiny","title":"Shiny bindings for streamingMessage — streamingMessage-shiny","text":"Output render functions using streamingMessage within Shiny applications interactive Rmd documents.","code":""},{"path":"/reference/streamingMessage-shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny bindings for streamingMessage — streamingMessage-shiny","text":"","code":"streamingMessageOutput(outputId, width = \"100%\", height = NULL)  renderStreamingMessage(expr, env = parent.frame(), quoted = FALSE)"},{"path":"/reference/streamingMessage-shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny bindings for streamingMessage — streamingMessage-shiny","text":"outputId output variable read width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. expr expression generates streamingMessage env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable.","code":""},{"path":"/reference/streamingMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"Streaming message — streamingMessage","title":"Streaming message — streamingMessage","text":"Places invisible empty chat message hold streaming message. can reset dynamically inside shiny app","code":""},{"path":"/reference/streamingMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Streaming message — streamingMessage","text":"","code":"streamingMessage(   ide_colors = get_ide_theme_info(),   width = NULL,   height = NULL,   element_id = NULL )"},{"path":"/reference/streamingMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Streaming message — streamingMessage","text":"ide_colors List containing colors IDE theme. width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. element_id element's id","code":""},{"path":"/reference/style_chat_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Style Chat History — style_chat_history","title":"Style Chat History — style_chat_history","text":"function processes chat history, filters system messages, formats remaining messages appropriate styling.","code":""},{"path":"/reference/style_chat_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Style Chat History — style_chat_history","text":"","code":"style_chat_history(history, ide_colors = get_ide_theme_info())"},{"path":"/reference/style_chat_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Style Chat History — style_chat_history","text":"history list chat messages elements containing 'role' 'content'. ide_colors List containing colors IDE theme.","code":""},{"path":"/reference/style_chat_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Style Chat History — style_chat_history","text":"list formatted chat messages styling applied, excluding system messages.","code":""},{"path":"/reference/style_chat_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Style Chat History — style_chat_history","text":"","code":"chat_history_example <- list(   list(role = \"user\", content = \"Hello, World!\"),   list(role = \"system\", content = \"System message\"),   list(role = \"assistant\", content = \"Hi, how can I help?\") )  if (FALSE) { # \\dontrun{ style_chat_history(chat_history_example) } # }"},{"path":"/reference/style_chat_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Style chat message — style_chat_message","title":"Style chat message — style_chat_message","text":"Style message based role author.","code":""},{"path":"/reference/style_chat_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Style chat message — style_chat_message","text":"","code":"style_chat_message(message, ide_colors = get_ide_theme_info())"},{"path":"/reference/style_chat_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Style chat message — style_chat_message","text":"message chat message. ide_colors List containing colors IDE theme.","code":""},{"path":"/reference/style_chat_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Style chat message — style_chat_message","text":"HTML element.","code":""},{"path":"/reference/text_area_input_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom textAreaInput — text_area_input_wrapper","title":"Custom textAreaInput — text_area_input_wrapper","text":"Modified version textAreaInput() removes label container. used mod_prompt_ui()","code":""},{"path":"/reference/text_area_input_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom textAreaInput — text_area_input_wrapper","text":"","code":"text_area_input_wrapper(   inputId,   label,   value = \"\",   width = NULL,   height = NULL,   cols = NULL,   rows = NULL,   placeholder = NULL,   resize = NULL,   textarea_class = NULL )"},{"path":"/reference/text_area_input_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom textAreaInput — text_area_input_wrapper","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value. width width input, e.g. '400px', '100%'; see validateCssUnit(). height height input, e.g. '400px', '100%'; see validateCssUnit(). cols Value visible character columns input, e.g. 80. argument take effect CSS width rule defined element; rule come width argument function containing page layout fluidPage(). rows value visible character rows input, e.g. 6. height argument specified, height take precedence browser's rendering. placeholder character string giving user hint can entered control. Internet Explorer 8 9 support option. resize directions textarea box can resized. Can one \"\", \"none\", \"vertical\", \"horizontal\". default, NULL, use client browser's default setting resizing textareas. textarea_class Class applied textarea element","code":""},{"path":"/reference/text_area_input_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom textAreaInput — text_area_input_wrapper","text":"modified textAreaInput","code":""},{"path":"/reference/transcribe_audio.html","id":null,"dir":"Reference","previous_headings":"","what":"Transcribe Audio from Data URI Using OpenAI's Whisper Model — transcribe_audio","title":"Transcribe Audio from Data URI Using OpenAI's Whisper Model — transcribe_audio","text":"function takes audio file data URI format, converts WAV, sends OpenAI's transcription API get transcribed text.","code":""},{"path":"/reference/transcribe_audio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transcribe Audio from Data URI Using OpenAI's Whisper Model — transcribe_audio","text":"","code":"transcribe_audio(audio_input, api_key = Sys.getenv(\"OPENAI_API_KEY\"))"},{"path":"/reference/transcribe_audio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transcribe Audio from Data URI Using OpenAI's Whisper Model — transcribe_audio","text":"audio_input string. audio data data URI format. api_key string. OpenAI API key. Defaults OPENAI_API_KEY environment variable.","code":""},{"path":"/reference/transcribe_audio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transcribe Audio from Data URI Using OpenAI's Whisper Model — transcribe_audio","text":"string containing transcribed text.","code":""},{"path":"/reference/transcribe_audio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transcribe Audio from Data URI Using OpenAI's Whisper Model — transcribe_audio","text":"","code":"if (FALSE) { # \\dontrun{ audio_uri <- \"data:audio/webm;base64,SGVsbG8gV29ybGQ=\" # Example data URI transcription <- transcribe_audio(audio_uri) print(transcription) } # }"},{"path":"/reference/welcomeMessage-shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny bindings for welcomeMessage — welcomeMessage-shiny","title":"Shiny bindings for welcomeMessage — welcomeMessage-shiny","text":"Output render functions using welcomeMessage within Shiny applications interactive Rmd documents.","code":""},{"path":"/reference/welcomeMessage-shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny bindings for welcomeMessage — welcomeMessage-shiny","text":"","code":"welcomeMessageOutput(outputId, width = \"100%\", height = NULL)  renderWelcomeMessage(expr, env = parent.frame(), quoted = FALSE)"},{"path":"/reference/welcomeMessage-shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny bindings for welcomeMessage — welcomeMessage-shiny","text":"outputId output variable read width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. expr expression generates welcomeMessage env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable.","code":""},{"path":"/reference/welcomeMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"Welcome message — welcomeMessage","title":"Welcome message — welcomeMessage","text":"HTML widget showing welcome message chat app. created able bind message shiny event trigger new render.","code":""},{"path":"/reference/welcomeMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Welcome message — welcomeMessage","text":"","code":"welcomeMessage(   ide_colors = get_ide_theme_info(),   translator = create_translator(),   width = NULL,   height = NULL,   element_id = NULL )"},{"path":"/reference/welcomeMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Welcome message — welcomeMessage","text":"ide_colors List containing colors IDE theme. translator Translator shiny.i18n::Translator width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. element_id element's id","code":""},{"path":"/news/index.html","id":"gptstudio-development-version","dir":"Changelog","previous_headings":"","what":"gptstudio (development version)","title":"gptstudio (development version)","text":"Fixed bug read_docs.R wasn’t correctly referencing help docs packages contain period (“.”) name. code now deals valid R package names defined CRAN Fixed bug showed message “ChatGPT responded” even service used “Chat source” related addins. #213 Added claude-3.5-sonnet model Anthropic. Set gpt-4o-mini default model OpenAI. #219 Fixed bugs Azure OpenAI service. #223 Add audio input option chat app. #224 Fix bug chat app loading linux. #224 Allow chat app run Positron (yet background job) #224 API calls now run async ExtendedTask. #224 New styling chat app. #224 Add code syntax highlighting chat app. #224 Replace curl calls httr2. #224 Remove magrittr pipe favor base pipe, require R >= 4.1 #226 Tweak app sidebar set min version bsicons httr2 #228 Added info tooltips API service settings inform users save modifying section #230 Fixed bug gptstudio_sitrep() prevented correctly report active ANTHROPIC_API_KEY","code":""},{"path":"/news/index.html","id":"gptstudio-development-version-1","dir":"Changelog","previous_headings":"","what":"gptstudio 0.4.0","title":"gptstudio (development version)","text":"release introduces several exciting enhancements. chat app now features sidebar conversation history, new chats, settings, along helpful tooltips. Additionally, local models now supported using ollama, Perplexity Service offers various models like llama-3-sonar mixtral-8x7b. Cohere Service, models command command-light, also available. Internally, improvements, bug fixes, quality--life enhancements.","code":""},{"path":"/news/index.html","id":"ui-updates-development-version","dir":"Changelog","previous_headings":"gptstudio 0.4.0","what":"UI updates","title":"gptstudio (development version)","text":"chat app now sidebar users can see conversation history, start new chats change settings. , chat interface room showing messages. chats saved automatically updated every assistant’s message. created placeholder title built using first user message conversation. Titles editable users able delete conversation (). shorter welcome message, added lots tooltips help navigation.","code":""},{"path":"/news/index.html","id":"local-models-development-version","dir":"Changelog","previous_headings":"gptstudio 0.4.0","what":"Local models","title":"gptstudio (development version)","text":"happy announce now support local models ollama. default look ollama host http://localhost:11434 can customized setting OLLAMA_HOST environmental variable. aware charge maintaining ollama installation models.","code":""},{"path":"/news/index.html","id":"perplexity-service-development-version","dir":"Changelog","previous_headings":"gptstudio 0.4.0","what":"Perplexity Service","title":"gptstudio (development version)","text":"Perplexity AI now offers wide range models part service. current version includes following models: llama-3-sonar-small-32k-chat, llama-3-sonar-small-32k-online, llama-3-sonar-large-32k-chat, llama-3-sonar-large-32k-online, llama-3-8b-instruct, llama-3-70b-instruct, mixtral-8x7b-instruc”. See Perplexity API documentation information models.","code":""},{"path":"/news/index.html","id":"cohere-service-development-version","dir":"Changelog","previous_headings":"gptstudio 0.4.0","what":"Cohere Service","title":"gptstudio (development version)","text":"Cohere now available another service. current version includes following models: command, command-light, command-nightly, command-light-nightly. See Cohere’s docs models capabilities.","code":""},{"path":"/news/index.html","id":"internal-development-version","dir":"Changelog","previous_headings":"gptstudio 0.4.0","what":"Internal","title":"gptstudio (development version)","text":"Reverted back use R6 class OpenAI streaming (now inherits SSEparser::SSEparser). doesn’t affect users interact addins, avoids wider range server errors. now make heavy use lintr keeping code consistency. Fixed bug retrieval OpenAI models Fixed bug Azure OpenAI request formation. Fixed bug “source” calls addins. Fixed bug showed “Connection refused” message viewer unix platforms. Fix #179 chat addin longer closes OpenAI api key detected. Converted PALM Google Google AI Studio models. Updated Anthropic models claude-3 update. bug fixes Azure OpenAI request body structure using token + api key. scrollbar now 5px width height. allows room using viewer panel. gptstudio now requires bslib v0.6.0 greater, take advantage sidebar styling. Updated anthropic API calls use new messages endpoint. Fixed bug Anthropic chats now include history. OpenAI stream longer hangs error “Argument length 0”. #199 source calls longer attempt evaluate R code. #203","code":""},{"path":"/news/index.html","id":"quality-of-life-improvements-and-documentation-development-version","dir":"Changelog","previous_headings":"gptstudio 0.4.0","what":"Quality of Life Improvements and Documentation","title":"gptstudio (development version)","text":"Chat source now respects model selection set using Chat addin. new function gpstudio_sitrep() added help debugging setup. API checking now done available service, including local models. New vignettes added setup service.","code":""},{"path":"/news/index.html","id":"gptstudio-development-version-2","dir":"Changelog","previous_headings":"","what":"gptstudio 0.3.1","title":"gptstudio (development version)","text":"Better API checking direct users .Renviron set API key persistent across sessions","code":""},{"path":[]},{"path":"/news/index.html","id":"persistent-config-file-development-version","dir":"Changelog","previous_headings":"gptstudio 0.3.0","what":"Persistent Config File","title":"gptstudio (development version)","text":"’ve introduced configuration file persists across sessions. Now, preferred app settings loaded time launch app, making even user-friendly.","code":""},{"path":"/news/index.html","id":"custom-prompt-selection-development-version","dir":"Changelog","previous_headings":"gptstudio 0.3.0","what":"Custom Prompt Selection","title":"gptstudio (development version)","text":"enhancing customization, ’ve added “task” option lets choose system prompt options “coding”, “general”, “advanced developer”, “custom”. “custom” option allows replace system prompt instructions entirely.","code":""},{"path":"/news/index.html","id":"expanded-api-services-development-version","dir":"Changelog","previous_headings":"gptstudio 0.3.0","what":"Expanded API Services","title":"gptstudio (development version)","text":"’re excited announce service now includes models HuggingFace’s inference API, Anthropic’s claude models, Google’s MakerSuite, Azure OpenAI service broadening range AI solutions can use.","code":""},{"path":"/news/index.html","id":"s3-class-for-api-services-development-version","dir":"Changelog","previous_headings":"gptstudio 0.3.0","what":"S3 Class for API Services","title":"gptstudio (development version)","text":"effort make future API additions easier, API calls now use S3 classes.","code":""},{"path":"/news/index.html","id":"real-time-streaming-updates-development-version","dir":"Changelog","previous_headings":"gptstudio 0.3.0","what":"Real-time Streaming Updates","title":"gptstudio (development version)","text":"Inspired Edgar Ruiz’s work chattr, ’ve implemented real-time streaming without relying R6, receive attention 0.4.0 release.","code":""},{"path":"/news/index.html","id":"model-selection-feature-development-version","dir":"Changelog","previous_headings":"gptstudio 0.3.0","what":"Model Selection Feature","title":"gptstudio (development version)","text":"ChatGPT add-now comes integrated model selection feature, enabling choose chat completion model matches either gpt-3.5 gpt-4 model name.","code":""},{"path":"/news/index.html","id":"upgraded-add-ins-development-version","dir":"Changelog","previous_headings":"gptstudio 0.3.0","what":"Upgraded Add-ins","title":"gptstudio (development version)","text":"add-ins code commenting spelling & grammar checking upgraded use chat/completions endpoint now default gpt-3.5-turbo model. can modify default setting needed.","code":""},{"path":"/news/index.html","id":"custom-openai-base-url-development-version","dir":"Changelog","previous_headings":"gptstudio 0.3.0","what":"Custom OpenAI Base Url","title":"gptstudio (development version)","text":"now option specify different base url OpenAI API. much-requested feature users, addition helps tailoring API access suit needs.","code":""},{"path":"/news/index.html","id":"bug-fixes-development-version","dir":"Changelog","previous_headings":"gptstudio 0.3.0","what":"Bug Fixes","title":"gptstudio (development version)","text":"’ve addressed several issues update. Now, “Spelling Grammar” “Comment code” add-ins can successfully insert text source. Also, installation issues related {stringr} package compatibility earlier versions R resolved.","code":""},{"path":"/news/index.html","id":"improved-compatibility-checks-development-version","dir":"Changelog","previous_headings":"gptstudio 0.3.0","what":"Improved Compatibility Checks","title":"gptstudio (development version)","text":"ensure optimal user experience, ’re now using GitHub Actions check compatibility wider range R versions Ubuntu. hope enjoy enhanced features improved performance latest version. always, feedback invaluable us, please keep coming!","code":""},{"path":"/news/index.html","id":"translations-development-version","dir":"Changelog","previous_headings":"gptstudio 0.3.0","what":"Translations","title":"gptstudio (development version)","text":"ChatGPT addin can now speak German! Thanks Mark Colley #107","code":""},{"path":[]},{"path":"/news/index.html","id":"translations-development-version-1","dir":"Changelog","previous_headings":"gptstudio 0.2.0","what":"Translations","title":"gptstudio (development version)","text":"ChatGPT addin can now receive translations. anyone wants contribute new translation needs edit translation file (“inst/translations/translation.json”). Currently supported languages English Spanish.","code":""},{"path":"/news/index.html","id":"httr2-development-version","dir":"Changelog","previous_headings":"gptstudio 0.2.0","what":"{httr2}","title":"gptstudio (development version)","text":"requests now handled httr2 functions. provides intuitive way extend functionality package, meaning new request parameters endpoint one pipe away implemented.","code":""},{"path":"/news/index.html","id":"stream-chat-completions-development-version","dir":"Changelog","previous_headings":"gptstudio 0.2.0","what":"Stream chat completions","title":"gptstudio (development version)","text":"Instead waiting full response received showing user, chat app now streams response generation real time. makes shorter wait times removes need use waiter.","code":""},{"path":"/news/index.html","id":"bug-fixes-development-version-1","dir":"Changelog","previous_headings":"gptstudio 0.2.0","what":"Bug fixes","title":"gptstudio (development version)","text":"welcome message longer consumed chat history. Errors requests now point OpenAI documentation. chat app, removed unnecessary whitespace first line code chunks. chat app, Enter key can now used send user instruction alternative clicking “Send” button. chat app, copy button now added via JS instead previous fragile R implementation. (@idavydov)","code":""},{"path":"/news/index.html","id":"new-look-of-the-message-history-development-version","dir":"Changelog","previous_headings":"gptstudio 0.2.0","what":"New look of the message history","title":"gptstudio (development version)","text":"individual message now rounded icon indicating whether comes user assistant. role different horizontal alignment slightly different background color.","code":""},{"path":"/news/index.html","id":"simplified-user-inputs-development-version","dir":"Changelog","previous_headings":"gptstudio 0.2.0","what":"Simplified user inputs","title":"gptstudio (development version)","text":"prompt buttons simplified give chat room expand. Now app settings button user can still choose skill level preferred style.","code":""},{"path":"/news/index.html","id":"welcome-message-with-instructions-development-version","dir":"Changelog","previous_headings":"gptstudio 0.2.0","what":"Welcome message with instructions","title":"gptstudio (development version)","text":"app starts (history cleared) assistant greets user random welcome message instructions use app.","code":""},{"path":"/news/index.html","id":"the-chat-can-be-adjusted-vertically-horizontally-and-is-scrollable-development-version","dir":"Changelog","previous_headings":"gptstudio 0.2.0","what":"The chat can be adjusted vertically, horizontally and is scrollable","title":"gptstudio (development version)","text":"Limited 800px width. prompt input always fixed bottom app. https://user-images.githubusercontent.com/19418298/233140923-5787ee5e-1042-4e84-8a42-6f1a55a47801.mp4","code":""},{"path":"/news/index.html","id":"the-chat-inherits-the-current-rstudio-theme-development-version","dir":"Changelog","previous_headings":"gptstudio 0.2.0","what":"The chat inherits the current rstudio theme","title":"gptstudio (development version)","text":"makes look integrated IDE, giving feel extension VScode. https://user-images.githubusercontent.com/19418298/233145316-5efe0e77-2192-48e6-97a1-02d87bd37255.mp4","code":""},{"path":"/news/index.html","id":"copy-to-clipboard-button-in-code-chunks-development-version","dir":"Changelog","previous_headings":"gptstudio 0.2.0","what":"Copy to clipboard button in code chunks","title":"gptstudio (development version)","text":"Every code chunk now top bar indicating language code displayed “Copy” button. user clicks button writes code clipboard shows short “Copied” feedback button.","code":""},{"path":"/news/index.html","id":"custom-scrollbar-development-version","dir":"Changelog","previous_headings":"gptstudio 0.2.0","what":"Custom scrollbar","title":"gptstudio (development version)","text":"app uses now narrower grey scroll bar.","code":""},{"path":"/news/index.html","id":"gptstudio-development-version-5","dir":"Changelog","previous_headings":"","what":"gptstudio 0.1.0","title":"gptstudio (development version)","text":"Added NEWS.md file track changes package.","code":""}]
